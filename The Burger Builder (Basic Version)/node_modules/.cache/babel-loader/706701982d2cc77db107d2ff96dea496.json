{"ast":null,"code":"import _defineProperty from \"/Users/User1/Documents/test-projects/Burger-Builder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/User1/Documents/test-projects/Burger-Builder/src/containers/BurgerBuilder/BurgerBuilder.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary'; //Global variable (Global variables are in capitals)\n\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: {\n        salad: 0,\n        bacon: 0,\n        cheese: 0,\n        meat: 0\n      },\n      totalPrice: 4,\n      purchaseAble: false,\n      purchasing: false\n    };\n\n    this.addIngredientHandler = type => {\n      //Yes you can do this in less lines, but for training purposes it's laid out simple.\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n\n      const updatedIngredients = _objectSpread({}, this.state.ingredients);\n\n      updatedIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      //Yes you can do this in less lines, but for training purposes it's laid out simple.\n      const oldCount = this.state.ingredients[type]; // Stops crashes if less than zero ingredients.\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCount = oldCount - 1;\n\n      const updatedIngredients = _objectSpread({}, this.state.ingredients);\n\n      updatedIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice - priceAddition;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.purchasingHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      alert(\"Continued whoohoo!\");\n    };\n  }\n\n  updatePurchaseState(ingredients) {\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, el) => {\n      return sum + el;\n    }, 0);\n    this.setState({\n      purchaseAble: sum > 0\n    });\n  }\n\n  render() {\n    const disabledInfo = _objectSpread({}, this.state.ingredients);\n\n    for (let key in disabledInfo) {\n      // Will update disabledInfo state with true or false\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalClosed: this.purchaseCancelHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(OrderSummary, {\n      ingredients: this.state.ingredients,\n      price: this.state.totalPrice,\n      purchaseCancelled: this.purchaseCancelHandler,\n      purchaseContinued: this.purchaseContinueHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(Burger, {\n      ingredients: this.state.ingredients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(BuildControls, {\n      ingredientAdded: this.addIngredientHandler,\n      ingredientRemoved: this.removeIngredientHandler,\n      price: this.state.totalPrice,\n      purchasable: this.state.purchaseAble,\n      disabled: disabledInfo,\n      ordered: this.purchasingHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default React.memo(BurgerBuilder);","map":{"version":3,"sources":["/Users/User1/Documents/test-projects/Burger-Builder/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","Modal","OrderSummary","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchaseAble","purchasing","addIngredientHandler","type","oldCount","updatedCount","updatedIngredients","priceAddition","oldPrice","newPrice","setState","updatePurchaseState","removeIngredientHandler","purchasingHandler","purchaseCancelHandler","purchaseContinueHandler","alert","sum","Object","keys","map","igKey","reduce","el","render","disabledInfo","key","memo"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport Aux from '../../hoc/Aux'\nimport Burger from '../../components/Burger/Burger'\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\n\n//Global variable (Global variables are in capitals)\nconst INGREDIENT_PRICES = {\n    salad: 0.5,\n    cheese: 0.4,\n    meat: 1.3,\n    bacon: 0.7\n}\n\nclass BurgerBuilder extends Component {\n    //This is an object, not an array, need to convert this using Object Mapping to an Array.\n    state = {\n        ingredients: {\n            salad: 0,\n            bacon: 0,\n            cheese: 0,\n            meat: 0\n        },\n        totalPrice: 4,\n        purchaseAble: false,\n        purchasing: false\n    }\n\n    updatePurchaseState(ingredients) {\n        const sum = Object.keys(ingredients)\n            .map(igKey => {\n            return ingredients[igKey]\n            })\n            .reduce((sum, el) => {\n                return sum + el;\n            }, 0);\n        this.setState({purchaseAble: sum > 0});\n    }\n\n    addIngredientHandler = (type) => {\n        //Yes you can do this in less lines, but for training purposes it's laid out simple.\n        const oldCount = this.state.ingredients[type];\n        const updatedCount = oldCount + 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceAddition = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice + priceAddition;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients})\n        this.updatePurchaseState(updatedIngredients);\n    }\n\n    removeIngredientHandler = (type) => {\n        //Yes you can do this in less lines, but for training purposes it's laid out simple.\n        const oldCount = this.state.ingredients[type];\n        // Stops crashes if less than zero ingredients.\n        if(oldCount <= 0) {\n            return;\n        }\n        const updatedCount = oldCount - 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceAddition = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice - priceAddition;\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients})\n        this.updatePurchaseState(updatedIngredients);\n    }\n\n    purchasingHandler = () => {\n        this.setState({purchasing: true})\n    }\n\n    purchaseCancelHandler = () => {\n        this.setState({purchasing: false})\n    }\n\n    purchaseContinueHandler = () => {\n        alert(\"Continued whoohoo!\");\n    }\n\n     render() {\n        const disabledInfo = {\n            // This is a copy of the state for ingredients.\n            ...this.state.ingredients\n        }\n        for (let key in disabledInfo) {\n            // Will update disabledInfo state with true or false\n            disabledInfo[key] = disabledInfo[key] <= 0\n        }\n          return (\n               <Aux>\n                   <Modal show={this.state.purchasing} modalClosed={this.purchaseCancelHandler}>\n                       <OrderSummary\n                            ingredients={this.state.ingredients}\n                            price={this.state.totalPrice}\n                            purchaseCancelled={this.purchaseCancelHandler}\n                            purchaseContinued={this.purchaseContinueHandler}/>\n                   </Modal>\n                    <Burger ingredients={this.state.ingredients}/>\n                    <BuildControls\n                    ingredientAdded={this.addIngredientHandler}\n                    ingredientRemoved={this.removeIngredientHandler}\n                    price={this.state.totalPrice}\n                    purchasable={this.state.purchaseAble}\n                    disabled={disabledInfo}\n                    ordered={this.purchasingHandler}/>\n               </Aux>\n          );\n     }\n}\n\nexport default React.memo(BurgerBuilder);"]},"metadata":{},"sourceType":"module"}