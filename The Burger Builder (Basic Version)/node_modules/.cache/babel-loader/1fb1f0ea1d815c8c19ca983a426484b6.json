{"ast":null,"code":"var _jsxFileName = \"/Users/User1/Documents/test-projects/Burger-Builder/src/components/Burger/Burger.js\";\nimport React from 'react';\nimport style from './Burger.module.css';\nimport BurgerIngredient from './BurgerIngredients/BurgerIngredients';\n\nconst burger = props => {\n  //Keys returns an array which we can now map\n  let transformedIngredients = Object.keys(props.ingredients) //igKey is the key in the map used in the array\n  .map(igKey => {\n    //Use the spread operator (...)\n    return [...Array(props.ingredients[igKey])] // The _ is blank, don't care about that argument, but we care about index (i)\n    .map((_, i) => {\n      return React.createElement(BurgerIngredient, {\n        key: igKey + i,\n        type: igKey,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      });\n    });\n  }) //Flatten the array to only create JSON with values.\n  .reduce((arr, el) => {\n    return arr.concat(el);\n  }, []);\n\n  if (transformedIngredients.length === 0) {\n    transformedIngredients = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Please start adding some ingredients.\");\n  }\n\n  return React.createElement(\"div\", {\n    className: style.burger,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(BurgerIngredient, {\n    type: \"bread-top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), transformedIngredients, React.createElement(BurgerIngredient, {\n    type: \"bread-bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }));\n};\n\nexport default burger;","map":{"version":3,"sources":["/Users/User1/Documents/test-projects/Burger-Builder/src/components/Burger/Burger.js"],"names":["React","style","BurgerIngredient","burger","props","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","reduce","arr","el","concat","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAEtB;AACA,MAAIC,sBAAsB,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,WAAlB,EACzB;AADyB,GAExBC,GAFwB,CAEpBC,KAAK,IAAI;AACV;AACA,WAAO,CAAC,GAAGC,KAAK,CAACP,KAAK,CAACI,WAAN,CAAkBE,KAAlB,CAAD,CAAT,EACH;AADG,KAEFD,GAFE,CAEE,CAACG,CAAD,EAAIC,CAAJ,KAAU;AACX,aAAO,oBAAC,gBAAD;AAAkB,QAAA,GAAG,EAAEH,KAAK,GAAGG,CAA/B;AAAkC,QAAA,IAAI,EAAEH,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAJE,CAAP;AAKC,GAToB,EAUjB;AAViB,GAWhBI,MAXgB,CAWT,CAACC,GAAD,EAAMC,EAAN,KAAa;AACjB,WAAOD,GAAG,CAACE,MAAJ,CAAWD,EAAX,CAAP;AACH,GAbgB,EAad,EAbc,CAA7B;;AAcA,MAAIX,sBAAsB,CAACa,MAAvB,KAAkC,CAAtC,EAAyC;AACrCb,IAAAA,sBAAsB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAzB;AACH;;AACA,SACK;AAAK,IAAA,SAAS,EAAEJ,KAAK,CAACE,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,EAEOE,sBAFP,EAGK,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHL,CADL;AAOJ,CA3BD;;AA6BA,eAAeF,MAAf","sourcesContent":["import React from 'react';\nimport style from './Burger.module.css'\nimport BurgerIngredient from './BurgerIngredients/BurgerIngredients'\n\nconst burger = (props) => {\n\n    //Keys returns an array which we can now map\n    let transformedIngredients = Object.keys(props.ingredients)\n        //igKey is the key in the map used in the array\n        .map(igKey => {\n            //Use the spread operator (...)\n            return [...Array(props.ingredients[igKey])]\n                // The _ is blank, don't care about that argument, but we care about index (i)\n                .map((_, i) => {\n                    return <BurgerIngredient key={igKey + i} type={igKey} />\n                });\n            })\n                //Flatten the array to only create JSON with values.\n                .reduce((arr, el) => {\n                    return arr.concat(el)\n                }, []);\n    if (transformedIngredients.length === 0) {\n        transformedIngredients = <p>Please start adding some ingredients.</p>\n    }\n     return (\n          <div className={style.burger}>\n               <BurgerIngredient type=\"bread-top\"/>\n                {transformedIngredients}\n               <BurgerIngredient type=\"bread-bottom\"/>\n          </div>\n     );\n};\n\nexport default burger;"]},"metadata":{},"sourceType":"module"}