{"ast":null,"code":"import _toConsumableArray from\"/Users/User1/Documents/test-projects/Burger-Builder/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React from'react';import style from'./Burger.module.css';import BurgerIngredient from'./BurgerIngredients/BurgerIngredients';var burger=function burger(props){//Keys returns an array which we can now map\nvar transformedIngredients=Object.keys(props.ingredients)//igKey is the key in the map used in the array\n.map(function(igKey){//Use the spread operator (...)\nreturn _toConsumableArray(Array(props.ingredients[igKey]))// The _ is blank, don't care about that argument, but we care about index (i)\n.map(function(_,i){return React.createElement(BurgerIngredient,{key:igKey+i,type:igKey});});})//Flatten the array to only create JSON with values.\n.reduce(function(arr,el){return arr.concat(el);},[]);if(transformedIngredients.length===0){transformedIngredients=React.createElement(\"p\",null,\"Please start adding some ingredients.\");}return React.createElement(\"div\",{className:style.burger},React.createElement(BurgerIngredient,{type:\"bread-top\"}),transformedIngredients,React.createElement(BurgerIngredient,{type:\"bread-bottom\"}));};export default burger;","map":{"version":3,"sources":["/Users/User1/Documents/test-projects/Burger-Builder/src/components/Burger/Burger.js"],"names":["React","style","BurgerIngredient","burger","props","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","reduce","arr","el","concat","length"],"mappings":"8IAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,qBAAlB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,uCAA7B,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,CAAW,CAEtB;AACA,GAAIC,CAAAA,sBAAsB,CAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,WAAlB,CACzB;AADyB,CAExBC,GAFwB,CAEpB,SAAAC,KAAK,CAAI,CACV;AACA,MAAO,oBAAIC,KAAK,CAACP,KAAK,CAACI,WAAN,CAAkBE,KAAlB,CAAD,CAAT,CACH;AADG,CAEFD,GAFE,CAEE,SAACG,CAAD,CAAIC,CAAJ,CAAU,CACX,MAAO,qBAAC,gBAAD,EAAkB,GAAG,CAAEH,KAAK,CAAGG,CAA/B,CAAkC,IAAI,CAAEH,KAAxC,EAAP,CACH,CAJE,CAAP,CAKC,CAToB,CAUjB;AAViB,CAWhBI,MAXgB,CAWT,SAACC,GAAD,CAAMC,EAAN,CAAa,CACjB,MAAOD,CAAAA,GAAG,CAACE,MAAJ,CAAWD,EAAX,CAAP,CACH,CAbgB,CAad,EAbc,CAA7B,CAcA,GAAIX,sBAAsB,CAACa,MAAvB,GAAkC,CAAtC,CAAyC,CACrCb,sBAAsB,CAAG,qEAAzB,CACH,CACA,MACK,4BAAK,SAAS,CAAEJ,KAAK,CAACE,MAAtB,EACK,oBAAC,gBAAD,EAAkB,IAAI,CAAC,WAAvB,EADL,CAEOE,sBAFP,CAGK,oBAAC,gBAAD,EAAkB,IAAI,CAAC,cAAvB,EAHL,CADL,CAOJ,CA3BD,CA6BA,cAAeF,CAAAA,MAAf","sourcesContent":["import React from 'react';\nimport style from './Burger.module.css'\nimport BurgerIngredient from './BurgerIngredients/BurgerIngredients'\n\nconst burger = (props) => {\n\n    //Keys returns an array which we can now map\n    let transformedIngredients = Object.keys(props.ingredients)\n        //igKey is the key in the map used in the array\n        .map(igKey => {\n            //Use the spread operator (...)\n            return [...Array(props.ingredients[igKey])]\n                // The _ is blank, don't care about that argument, but we care about index (i)\n                .map((_, i) => {\n                    return <BurgerIngredient key={igKey + i} type={igKey} />\n                });\n            })\n                //Flatten the array to only create JSON with values.\n                .reduce((arr, el) => {\n                    return arr.concat(el)\n                }, []);\n    if (transformedIngredients.length === 0) {\n        transformedIngredients = <p>Please start adding some ingredients.</p>\n    }\n     return (\n          <div className={style.burger}>\n               <BurgerIngredient type=\"bread-top\"/>\n                {transformedIngredients}\n               <BurgerIngredient type=\"bread-bottom\"/>\n          </div>\n     );\n};\n\nexport default burger;"]},"metadata":{},"sourceType":"module"}